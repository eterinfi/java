package core.threading;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

public class CallableThreading implements Callable<Integer> {
	public static void main(String[] args) {
		CallableThreading ct = new CallableThreading();
		FutureTask<Integer> ft = new FutureTask<>(ct);
		for ( int i = 0; i < 100; i++ ) {
			System.out.println(Thread.currentThread().getName() + "'s loop variable i's value: " + i);
			if ( i == 20 )
				new Thread(ft, "thread with return value").start();
		}
		try {
			System.out.println("subthread's return value: " + ft.get());
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (ExecutionException e) {
			e.printStackTrace();
		}
	}
	@Override
	public Integer call() throws Exception {
		int i = 0;
		for ( ; i < 100; i++ )
			System.out.println(Thread.currentThread().getName() + " " + i);
		return i;
	}
}